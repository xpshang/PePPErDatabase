# Generated by Django 3.2 on 2023-07-05 03:34

import datetime
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='DataColumnName',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=256)),
                ('desc', models.CharField(max_length=256)),
                ('cate', models.IntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='DataModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('publication', models.CharField(max_length=64, null=True, verbose_name='Publication')),
                ('volcano', models.CharField(max_length=64, null=True, verbose_name='Volcano')),
                ('eruption', models.CharField(max_length=64, null=True, verbose_name='Eruption')),
                ('data_doi', models.CharField(max_length=64, null=True, verbose_name='Data DOI')),
                ('chemistry', models.CharField(max_length=64, null=True, verbose_name='Chemistry')),
                ('bulk_sio2', models.CharField(max_length=64, null=True, verbose_name='Bulk SiO2 (wt. %)')),
                ('bulk_na2o', models.CharField(max_length=64, null=True, verbose_name='Bulk Na2O+K2O (wt.%)')),
                ('glass_sio2', models.CharField(max_length=64, null=True, verbose_name='Glass SiO2 (wt. %)')),
                ('glass_na2o', models.CharField(max_length=64, null=True, verbose_name='Glass Na2O+K2O (wt.%)')),
                ('chemistry_doi', models.CharField(max_length=64, null=True, verbose_name='Chemistry DOI')),
                ('rock_experiment_type', models.CharField(max_length=64, null=True, verbose_name='Rock/experiment type')),
                ('subaerial_submarine', models.CharField(max_length=64, null=True, verbose_name='Subaerial/submarine')),
                ('eff_exp', models.CharField(max_length=64, null=True, verbose_name='Eff/exp')),
                ('sample_no', models.CharField(max_length=64, null=True, verbose_name='Sample no.')),
                ('bulk_porosity', models.CharField(max_length=64, null=True, verbose_name='Bulk porosity (%)')),
                ('connected_porosity', models.CharField(max_length=64, null=True, verbose_name='Connected porosity (%)')),
                ('connectivity', models.CharField(max_length=64, null=True, verbose_name='Connectivity')),
                ('permeability_k1', models.CharField(max_length=64, null=True, verbose_name='Permeability (k1) (m-2)')),
                ('permeability_k2', models.CharField(max_length=64, null=True, verbose_name='Permeability (k2) (m-1)')),
                ('vesicle_number_density', models.CharField(max_length=64, null=True, verbose_name='vesicle number density (m-3)')),
                ('s_polydispersivity', models.CharField(max_length=64, null=True, verbose_name='S (polydispersivity)')),
                ('total_crystallinity', models.CharField(max_length=64, null=True, verbose_name='total crystallinity (%)')),
                ('phenocrystallinity', models.CharField(max_length=64, null=True, verbose_name='phenocrystallinity (%)')),
                ('microcrystallinity', models.CharField(max_length=64, null=True, verbose_name='microcrystallinity (%)')),
                ('status', models.IntegerField(default=0)),
                ('create_date', models.DateTimeField(default=datetime.datetime(2023, 7, 5, 11, 34, 6, 735231))),
                ('upload_id', models.IntegerField(default=0)),
            ],
            options={
                'verbose_name': 'Data Admin',
                'verbose_name_plural': 'Data Admin',
            },
        ),
        migrations.CreateModel(
            name='HistoryModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url', models.CharField(max_length=2048)),
                ('name', models.CharField(max_length=2048)),
                ('crt_date', models.DateTimeField(default=datetime.datetime(2023, 7, 5, 11, 34, 6, 736228))),
                ('user_id', models.IntegerField(default=0)),
                ('type', models.IntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='LiteratureModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('publication', models.CharField(max_length=64, verbose_name='Publication')),
                ('pub_year', models.CharField(max_length=16, verbose_name='Pub Year')),
                ('doi', models.CharField(max_length=256, verbose_name='DOI')),
                ('title', models.CharField(max_length=200, verbose_name='Title')),
            ],
            options={
                'verbose_name': 'Literature Admin',
                'verbose_name_plural': 'Literature Admin',
            },
        ),
        migrations.CreateModel(
            name='UserUploadModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_id', models.IntegerField(default=0)),
                ('status', models.IntegerField(default=0)),
                ('upload_date', models.DateTimeField(default=datetime.datetime(2023, 7, 5, 11, 34, 6, 735231), verbose_name='verbose name')),
            ],
            options={
                'verbose_name': 'Review Admin',
                'verbose_name_plural': 'Review Admin',
            },
        ),
        migrations.CreateModel(
            name='DataReviewModel',
            fields=[
            ],
            options={
                'verbose_name': '图片新闻',
                'verbose_name_plural': '图片新闻',
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('DataApp.datamodel',),
        ),
    ]
